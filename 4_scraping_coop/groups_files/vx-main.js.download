if( typeof(localStorage) == 'undefined' ) { const localStorage = window.localStorage; }

const store = new Vuex.Store({
    state: {
        carts: [],
        store: {},
        profile:{},
        citys: [],
        wards:[],
        is_mature: false,
    },
    getters: {
        storeCarts: (state) => {
            return state.carts.filter( cart => (cart.marketplace != "marketplace" && cart.types == 'none') );
        },
        hamperCarts:(state) => {
            var hampers = state.carts.filter( cart => (cart.marketplace != "marketplace" && cart.types != 'none' && typeof(cart.ishamper) !== 'undefined' && cart.ishamper) );
            let key = 'types';
            var groupBy = hampers.reduce(function(rv, x) { (rv[x[key]] = rv[x[key]] || []).push(x); return rv; }, {});  
            return groupBy;
        },
        getHamper:(state) => {
            return state.carts.filter( cart => (cart.marketplace != "marketplace" && cart.types != 'none' && typeof(cart.ishamper) !== 'undefined' && cart.ishamper) );
        },
        hampers:(state) => {
            return state.carts.filter( cart => (cart.marketplace != "marketplace" && cart.types != 'none') );
        },
        getHamperByTypes:(state, getters ) => (types) => {
            var groupBy = getters.hampers.filter( el => (el.types == types) );
            return groupBy;
        },
        marketPlaces: (state) => {
            let newArray = {};
            let marketPlaces = state.carts.filter(cart => cart.marketplace == "marketplace")
            marketPlaces.forEach( (elm) => {
                if( typeof(newArray[elm.store]) != 'undefined'  ){
                    newArray[elm.store].push(elm);
                } else {
                    newArray[elm.store] = [];
                    newArray[elm.store].push(elm);
                }
            });
            return newArray;
        },
        totalItems:(state,getters) => {
            return getters.storeCarts.length;
        },
        totalHamper:(state,getters) => {
            return Object.keys(getters.hamperCarts).length;
        },
        districtsByCityId:(state) => (cityId) => {
            if( (typeof(state.citys[cityId]) != 'undefined') && (typeof(state.citys[cityId].dsquan) != 'undefined') ) {
                let dsquan = state.citys[cityId].dsquan;
                const sorted = Object.entries(dsquan).sort(([, a], [, b]) =>  {
                    return a.localeCompare(b, undefined, { numeric: true, sensitivity: 'base' });
                })
                return sorted;
            }
            return [];
        },
        wardsByDistrictId:(state) => (districtId) => {
            if( typeof(state.wards[districtId]) != 'undefined' && (districtId != 0) )  {
                let dsphuong = state.wards[districtId];
                const sorted = Object.entries(dsphuong).sort(([, a], [, b]) =>  {
                    return a.localeCompare(b, undefined, { numeric: true, sensitivity: 'base' });
                })
                return sorted;
            }
            return [];
        },
    },
    mutations: {
        SETSTORE(state,payload){
            state.store = payload.store;
            state.citys = payload.citys;
            state.wards = payload.wards;
        },
        LOADCARTS(state){
            if( typeof( localStorage.getItem('carts') ) !== 'undefined' && localStorage.getItem('carts') !== null ) {
                state.carts = JSON.parse(localStorage.getItem('carts'));
            }
        },
        ADDTOCART(state, itemToAdd){
            let itemInCart = state.carts.filter(item => (item.id === itemToAdd.id && itemToAdd.types == 'none'));
            if ( (itemInCart.length > 0) === false ) { // No Item

                if( typeof(itemToAdd.checked) != 'undefined' && itemToAdd.checked == '1' 
                    && typeof(itemToAdd.onhand) != 'undefined' && itemToAdd.onhand >= '1'
                ){

                    if( typeof(itemToAdd.maxincart) != 'undefined' && itemToAdd.maxincart != '0' ) {

                        if( (parseInt(itemToAdd.qty) <= parseInt(itemToAdd.maxincart)) && parseInt(itemToAdd.qty) <= parseInt(itemToAdd.onhand) ) {
                            state.carts.push(Vue.util.extend({}, itemToAdd));
                        } else {
                            addNotice('Vượt quá số lượng!', 
                                '<img src="' + itemToAdd.image + '" width="50px">', 
                                'Bạn chỉ được mua tối đa ' + ((parseInt(itemToAdd.maxincart) <= parseInt(itemToAdd.onhand)) ? itemToAdd.maxincart : itemToAdd.onhand ) + ' sản phẩm!' , 
                                'success'
                            );
                        }

                    } else {
                        if( parseInt(itemToAdd.qty) <= parseInt(itemToAdd.onhand) ) {
                            state.carts.push(Vue.util.extend({}, itemToAdd));
                        } else {
                            addNotice('Vượt quá số lượng!', 
                                '<img src="' + itemToAdd.image + '" width="50px">', 
                                'Bạn chỉ được mua tối đa ' + ((parseInt(itemToAdd.maxincart) <= parseInt(itemToAdd.onhand)) ? itemToAdd.maxincart : itemToAdd.onhand ) + ' sản phẩm!' , 
                                'success'
                            );
                        }
                    }

                } else {
                    state.carts.push(Vue.util.extend({}, itemToAdd));
                    addNotice('Thêm vào giỏ hàng!', 
                                '<img src="' + itemToAdd.image + '" width="50px">', 
                                'Sản phẩm của bạn đã được thêm vào giỏ hàng!' , 
                                'success'
                            );
                }
            } else { // Item
                if( typeof(itemToAdd.checked) != 'undefined' && itemToAdd.checked == '1' 
                    && typeof(itemToAdd.onhand) != 'undefined' && itemToAdd.onhand >= '1' 
                ){

                    if( typeof(itemToAdd.maxincart) != 'undefined' && itemToAdd.maxincart != '0' ) {

                        if( (parseInt(itemInCart[0].qty) + parseInt(itemToAdd.qty)) <= parseInt(itemToAdd.maxincart) 
                            && (parseInt(itemInCart[0].qty) + parseInt(itemToAdd.qty)) <= parseInt(itemToAdd.onhand) ) {
                                itemInCart[0].qty = parseInt(itemInCart[0].qty) + parseInt(itemToAdd.qty);
                        } else {
                            addNotice('Vượt quá số lượng!', 
                                '<img src="' + itemToAdd.image + '" width="50px">', 
                                'Bạn chỉ được mua tối đa ' + ((parseInt(itemToAdd.maxincart) <= parseInt(itemToAdd.onhand)) ? itemToAdd.maxincart : itemToAdd.onhand ) + ' sản phẩm!' , 
                                'success'
                            );
                        }

                    } else if( parseInt(itemToAdd.qty) <= parseInt(itemToAdd.onhand) ) {
                        itemInCart[0].qty = parseInt(itemInCart[0].qty) + parseInt(itemToAdd.qty);
                    } else {
                        addNotice('Vượt quá số lượng!', 
                            '<img src="' + itemToAdd.image + '" width="50px">', 
                            'Bạn chỉ được mua tối đa ' + ((parseInt(itemToAdd.maxincart) <= parseInt(itemToAdd.onhand)) ? itemToAdd.maxincart : itemToAdd.onhand ) + ' sản phẩm!' , 
                            'success'
                        );
                    }

                } else {
                    itemInCart[0].qty = parseInt(itemInCart[0].qty) + parseInt(itemToAdd.qty);
                }
            }
        },
        ADDTOHAMPER(state, itemToAdd){
            let findIndex = state.carts.findIndex(item => (item.types === itemToAdd.types && item.cate === itemToAdd.cate));
            if(findIndex == -1) {
                state.carts.push(Vue.util.extend({}, itemToAdd));
            } else {
                let oldQty = state.carts[findIndex].qty;
                if( typeof(state.carts[findIndex].ishamper) ){
                    let ishamper = state.carts[findIndex].ishamper;
                    let qtyhamper = state.carts[findIndex].qtyhamper;
                    state.carts[findIndex] = {...itemToAdd, 'qty' : oldQty, ishamper: ishamper, qtyhamper: qtyhamper};
                } else {
                    state.carts[findIndex] = {...itemToAdd, 'qty' : oldQty};
                }
            }
        },
        ADDTOCARTHAMPER(state, hampers){
            hampers.hamper.forEach( (item) => {
                const findIndex = state.carts.findIndex( (cart) => (cart.id == item.id && cart.types == item.types) );
                state.carts[findIndex] = {...state.carts[findIndex], ishamper: true, qtyhamper: hampers.qtyhamper  };
            });
        },
        INCREMENTITEM(state, item){
            const findIndex = state.carts.findIndex( (element) => (element.id == item.id && element.types == item.types) );
            if(findIndex != -1){
                state.carts[findIndex].qty = parseFloat(state.carts[findIndex].qty) + 1;
            }
        },
        DECREMENTITEM(state, item){
            const findIndex = state.carts.findIndex( (element) => (element.id == item.id && element.types == item.types) );
            if(findIndex != -1){
                if( parseFloat(state.carts[findIndex].qty) > 1){
                    state.carts[findIndex].qty = parseFloat(state.carts[findIndex].qty) - 1;
                } else {
                    state.carts.splice(findIndex,1);
                }
            }
        },
        REMOVEITEM(state,item){
            const findIndex = state.carts.findIndex( (element) => (element.id == item.id && element.types == item.types) );
            state.carts.splice(findIndex,1);
        },
        UPDATENOTE(state,item){
            const findIndex = state.carts.findIndex( (element) => element.id == item.id );
            state.carts[findIndex].ghichu = strippedContent(item.ghichu);
        },
        UPDATEQTY(state,item){
            const findIndex = state.carts.findIndex( (element) => element.id == item.id );
            state.carts[findIndex].qty = item.qty; 
        },
        UPDATECART(state, items){
            state.carts = items;
        },
        UPDATEQTYHAMPER(state, hampers){
            hampers.hamper.forEach( (item) => {
                const findIndex = state.carts.findIndex( (cart) => (cart.id == item.id && cart.types == item.types) );
                if(hampers.qtyhamper != 0){
                    let newQtyHamer = state.carts[findIndex].qtyhamper + hampers.qtyhamper;
                    if(newQtyHamer == 0){
                        state.carts.splice(findIndex,1);
                    } else {
                        state.carts[findIndex] = {...state.carts[findIndex], ishamper: true, qtyhamper: newQtyHamer };
                    }   
                } else {
                    state.carts.splice(findIndex,1);
                }

            });
        },
        SETMATURE(state){
            state.is_mature = true;
        },
        EMTYCART(state){
            localStorage.removeItem('carts');
            state.carts = [];
        },
        EMTYHAMPER(state){
            var itemCart = state.carts.filter(function(e) { return e.types == 'none' })
            state.carts = itemCart;
        }
    },
    actions: {
        setStore(context, payload){
            context.commit('SETSTORE', payload);
            context.commit('LOADCARTS');
        },
        saveCarts(context){
            localStorage.setItem('carts', JSON.stringify(context.state.carts));
        },
        addToCart(context, payload){
            context.commit('LOADCARTS');
            if( typeof(payload.types) == 'undefined' || payload.types == 'none' ){
                context.commit('ADDTOCART', payload);
            } else {
                context.commit('ADDTOHAMPER', payload);
            }
            context.dispatch('saveCarts');
        },
        addToCartHamper(context, payload){
            context.commit('LOADCARTS');
            context.commit('ADDTOCARTHAMPER',payload);
            context.dispatch('saveCarts');
        },
        incrementItem(context, payload) {
            context.commit('LOADCARTS');
            context.commit('INCREMENTITEM',payload);
            context.dispatch('saveCarts');
        },
        decrementItem(context, payload) {
            context.commit('LOADCARTS');
            context.commit('DECREMENTITEM',payload);
            context.dispatch('saveCarts');
        },
        removeItem(context, payload) {
            context.commit('LOADCARTS');
            context.commit('REMOVEITEM',payload);
            context.dispatch('saveCarts');
        },
        updateNote(context,payload){
            context.commit('LOADCARTS');
            context.commit('UPDATENOTE',payload);
            context.dispatch('saveCarts');
        },
        updateQty(context, payload) {
            context.commit('LOADCARTS');
            if(payload.qty != '') {
                if( payload.dvt == 'kg' ) {
                    let regex = /^\d+(\.\d+)?$/;
                    if( regex.test(payload.qty) ){
                        context.commit('UPDATEQTY',payload);
                    } else {
                        context.commit('LOADCARTS');
                    }
                } else {
                    let regex = /^\d+$/;
                    if( regex.test(payload.qty) ){
                        context.commit('UPDATEQTY',payload);
                    } else {
                        context.commit('LOADCARTS');
                    }
                }
            } else {
                payload.qty = 0;
                context.commit('UPDATEQTY',payload);
            }
            context.dispatch('saveCarts');
        },
        updateCart(context,payload){
            context.commit('LOADCARTS');
            context.commit('UPDATECART', payload);
            context.dispatch('saveCarts');
        },
        updateQtyHamper(context,payload){
            context.commit('LOADCARTS');
            context.commit('UPDATEQTYHAMPER', payload);
            context.dispatch('saveCarts');
        },
        emptyCart(context){
            context.commit('LOADCARTS');
            context.commit('EMTYCART');
            context.dispatch('saveCarts');
        },
        setMature(context){
            context.commit('SETMATURE');
        },
        emptyHamper(context){
            context.commit('LOADCARTS');
            context.commit('EMTYHAMPER');
            context.dispatch('saveCarts');
        },
        addWishList(context,payload){
            jQuery.ajax({
                type: "POST",
                url: url_handle,
                data: { 
                    'request': 'w_addLikeProduct',
                    'item': payload.sku,
                },
                dataType: "JSON",
                success: function (response) {
                    addNotice( response.title,'<img src="'+payload.image+'" width="50px">',response.text,response.status);
                }
            });
        },
    },
});